syntax = "proto3";
package zkp_auth;

/*
 * Prover registers in the server sending:
   y1: alpha^x mod p
   y2: beta^x mod p
*/
message RegisterRequest {
    string user = 1;
    bytes y1 = 2; // big uint
    bytes y2 = 3; // big uint
}

message RegisterResponse {}

/*
 * Prover ask for challenge in the server sending: 
   r1: alpha^k mod p
   r2: beta^k mod p
 * Verifier sends challenge back
*/
message AuthenticationChallendgeRequest {
    string user = 1;
    bytes r1 = 2; // big uint
    bytes r2 = 3; // big uint
}

message AuthenticationChallendgeResponse {
    string auth_id = 1;
    bytes c = 2;
}

/*
 * Prover sends solution to the challenge
   s: k - x * c mod q
 * Verifier sends the session ID if the solution is correct
*/
message AuthenticationAnswerRequest {
    string auth_id = 1;
    bytes s = 2; 
}

message AuthenticationAnswerResponse {
    string session_id = 1;
}

service Auth {
    rpc Register(RegisterRequest) returns (RegisterResponse) {}
    rpc CreateAuthenticationChallenge(AuthenticationChallendgeRequest) returns (AuthenticationChallendgeResponse) {}
    rpc VerifyAuthentication(AuthenticationAnswerRequest) returns (AuthenticationAnswerResponse) {}
}